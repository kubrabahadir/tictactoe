<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAIB8AAAEAIAAkEAAAFgAAACgAAAAgAAAAPgAAAAEAIAAAAAAAgA8AAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAFBQUABwcHAAgICAAHBwcABAQEAAMDAwADAwMAAwMDAAMDAwADAwMAAwMDAAMD
        AwADAwMAAwMDAAMDAwADAwMAAwMDAAMDAwADAwMAAwMDAAMDAwADAwMAAwMDAAEBAQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAACAgIAAAAAAAODg4CCgoKBAkJCQQGBgYDBQUFAwUFBQMFBQUDBQUFAwUF
        BQMFBQUDBQUFAwUFBQMFBQUDBQUFAwUFBQMFBQUDBQUFAwUFBQMFBQUDBQUFAwUFBQMFBQUCAAAAAAUF
        BQAZGRkAAAAAAAAAAAAAAAAAAAAAAAoKCgAJCQkMAgICZAEBAaYBAQGxAQEBsAEBAa4AAACtAAAArQAA
        AK0AAACtAAAArQAAAK0AAACtAAAArQAAAK0AAACsAAAArAAAAK0AAACsAAAArAAAAK0AAACtAAAArQAA
        AKkBAQF+BgYGHwICAgAAAAAAAAAAAAAAAAAAAAAACwsLAwMDA4EAAAD6AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8CAgK4BwcHFAAAAAAAAAAAAAAAAAAAAAAEBAQaAQEB2gAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPsEBAROAAAAAAAAAAAAAAAAAAAAAAQEBCgBAQHpAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wMDA2YAAAAAAAAAAAAAAAAAAAAABQUFKwEB
        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
        AP8AAAD/AAAA/wAAAP8ICAhqAAAAAAAAAAAAAAAAAAAAABkZGRYFBQXQAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AwMD9RISEkQAAAAAAAAAAAAAAAAAAAAAa2pqAQ4ODlgDAwPiAQEB/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wAAAP8AAAD/AAAA/wEB
        Af8BAQH/AQEB/wEBAf8BAQH/AQEB/wQEBPUPDw+PMjExCgAAAAAAAAAAAAAAAAAAAABMTEwAZWVlAQ8P
        Dy4ICAhkBQUFcQcHB3EHBwdyCAgIcgkJCXMLCgp0DAwMdA0NDXUODg51DQ0NdQwMDHQLCwt0CgoKcwoK
        CnMKCgpzCwsLdA0MDHUODQ11Dg4Odg4ODnYNDQ1wGBgYSDs7OwklJSUAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAlJSUADAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAODg4AMTAwAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP/////wAAA/wAAAD4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AA
        AAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AA
        AAfAAAAP//////////8=
</value>
  </data>
</root>